{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","useState","convertedMilliseconds","doConvertMilliseconds","theLaunchDateString","doSetLaunchDateString","windowData","setWindowData","dateOnly","doSetDateOnly","item","useEffect","getWindowData","launchDateString","getAttribute","launchDateSec","launchTimeSec","totalLaunchMilli","Number","Date","now","dataObj","window","date","intervalDelay","precision","renderer","days","hours","minutes","seconds","completed","secondsAbbrev","minutesAbbrev","hoursAbbrev","launching","daysAbbrev","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","querySelectorAll","forEach","ReactDOM","render","StrictMode"],"mappings":"uPAmKeA,MA1Jf,SAAaC,GAEX,MAAqDC,mBAAS,MAA9D,mBAAKC,EAAL,KAA4BC,EAA5B,KACA,EAAmDF,mBAAS,IAA5D,mBAAKG,EAAL,KAA0BC,EAA1B,KACA,EAAkCJ,mBAAS,IAA3C,mBAAKK,EAAL,KAAiBC,EAAjB,KAEA,EAAgCN,oBAAS,GAAzC,mBAAKO,EAAL,KAAeC,EAAf,KAMKC,EAAQV,EAARU,KAGLC,qBAAU,WAERJ,EAAcK,EAAc,wBAkB1B,IAAIC,EAAmBH,EAAKI,aAAa,2BACzCT,EAAsBQ,GAEtB,IAAIE,EAAgBL,EAAKI,aAAa,8BAElCE,EAAgBN,EAAKI,aAAa,8BAMlCE,GAEFP,GAAc,GAIhB,IACIQ,EAAqC,KADpBC,OAAOF,GAAiBE,OAAOH,IAGpD,GAAGC,EAAc,CAMVC,EAHYE,KAAKC,MADJ,OAgBdX,GAAc,GAMpBN,EAAsBc,KAGvB,IAgBH,IAgCQL,EAAgB,SAAAS,GACpB,OAAKC,OAAOD,GACHC,OAAOD,GAET,IAQX,OACEnB,EACA,cAAC,IAAD,CACAqB,KAAMrB,EACNsB,cAAe,IACfC,UAAW,EACXC,SA3CiB,SAAC,GAAiD,EAA/CC,KAAgD,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAE9CC,EAAoE1B,EAApE0B,cAAeC,EAAqD3B,EAArD2B,cAAeC,EAAsC5B,EAAtC4B,YAAyBC,GAAa7B,EAAzB8B,WAAyB9B,EAAb6B,WAE5D,OAAG3B,EACM,sBAAM6B,UAAU,iBAAhB,SAAkCjC,IAIxC2B,EAEC,sBAAMM,UAAU,iBAAhB,SAAkCF,IAMpC,uBAAME,UAAU,iBAAhB,UAEIT,EAAOM,EAFX,IAEyBL,EAASI,EAFlC,IAEkDH,EAASE,QAyB3D,MClJSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDSQ,SAASC,iBAAiB,qBAIjCC,SAAQ,SAAAvC,GACtBwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK1C,KAAMA,MAEbA,MASJ4B,M","file":"static/js/main.f92c6618.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n// import ReactDOM from 'react-dom';\nimport Countdown /*, { zeroPad, calcTimeDelta, formatTimeDelta } */  from 'react-countdown';\n// import {useEffect, useState, ReactDOM} from 'react'\n\n\n\nfunction App(props) {\n\n  let [convertedMilliseconds, doConvertMilliseconds] = useState(null);\n  let [theLaunchDateString, doSetLaunchDateString] = useState('');\n  let [windowData, setWindowData] = useState({})\n\n  let [dateOnly, doSetDateOnly] = useState(false);\n\n  // let [theDate, setTheDate] = useState({})\n\n\n  // console.log('here is props', props)\n  let {item} = props\n  // console.log('here is item dude', item);\n\n  useEffect(() => {\n\n    setWindowData(getWindowData('launchCountdownL10n'))\n\n      // let launchDate = item.getAttribute(\"launch-date\");\n      // console.log('here is launchDate', launchDate )\n      // let launchTime = item.getAttribute(\"launch-time\");\n      // console.log('here is launchTime', launchTime )\n      // let convertedLaunchTime = convertTime(launchTime)\n      // console.log('here is convertedLaunchTime', convertedLaunchTime )\n      // let convertedLaunchDate = launchDate\n      // console.log('here is convertedLaunchDate', convertedLaunchDate )\n      // let totalConvertedDate = convertedLaunchDate + ' ' + convertedLaunchTime;\n      // console.log('here is totalConvertedDate', totalConvertedDate );\n      // let date = new Date(totalConvertedDate.replace(/-/g, \"/\"));\n      // console.log('here is date', date )\n      // let milliseconds = date.getTime() + (date.getTimezoneOffset()*60*1000);\n      // console.log('here is milliseconds', milliseconds);\n      // doConvertMilliseconds(milliseconds)\n\n      let launchDateString = item.getAttribute(\"data-launch_date_string\");\n      doSetLaunchDateString(launchDateString);\n      // console.log('here is launchDateString', launchDateString );\n      let launchDateSec = item.getAttribute(\"data-launch_date_timestamp\");\n      // console.log('here is launchDateSec', launchDateSec )\n      let launchTimeSec = item.getAttribute(\"data-launch_hour_timestamp\");\n      // console.log('here is launchTimeSec', launchTimeSec )\n\n\n\n      //if there is no launch time\n      if(!launchTimeSec){\n        // console.log('no time wizard')\n        doSetDateOnly(true);\n      }\n\n      //add up launch date and time\n      let totalLaunchSec = Number(launchTimeSec) + Number(launchDateSec)\n      let totalLaunchMilli =  totalLaunchSec * 1000;\n\n      if(launchTimeSec){\n\n        let milliInADay = 24 * 60 * 60 * 1000;\n        let milliToday = Date.now();\n\n\n          if(totalLaunchMilli - milliToday > milliInADay){\n            // console.log('subtraction happening');\n            // console.log('totalLaunchSec', totalLaunchSec);\n            // console.log('totalLaunchMilli', totalLaunchMilli);\n            // console.log('milliToday', milliToday);\n            // console.log('milliInADay', milliInADay);\n            //\n            // console.log('totalLaunchMilli - milliToday', totalLaunchMilli - milliToday )\n\n\n\n            //only show date\n            doSetDateOnly(true);\n          }\n\n\n      }\n\n      doConvertMilliseconds(totalLaunchMilli);\n\n\n  }, []) // this diff is necessary\n\n\n  // const convertTime = (hours) => {\n  //   let seconds = hours*60*60\n  //   const h = Math.floor(seconds / 3600) == 0 ? '00' : Math.floor(seconds / 3600);\n  //   const m = Math.floor((seconds % 3600) / 60) == 0 ? '00' : Math.floor((seconds % 3600) / 60) ;\n  //   const s = Math.round(seconds % 60);\n  //   return [\n  //     h,\n  //     m > 9 ? m : (h ? '0' + m : m || '0'),\n  //     s > 9 ? s : '0' + s\n  //   ].filter(Boolean).join(':');\n  // }\n\n\n  const showProperCountdown = () => {\n\n\n\n  }\n\n\n  const formatDate = ({ days ,hours, minutes, seconds, completed }) => {\n\n    let {secondsAbbrev, minutesAbbrev, hoursAbbrev, daysAbbrev, launching} = windowData;\n\n    if(dateOnly){\n      return <span className=\"countdown-text\">{theLaunchDateString}</span>;\n    }\n\n\n    if(completed){\n      return (\n        <span className=\"countdown-text\">{launching}</span>\n      )\n    }\n\n    return (\n\n      <span className=\"countdown-text\">\n         {/* {days}{daysAbbrev}  */}\n         {hours}{hoursAbbrev} {minutes}{minutesAbbrev} {seconds}{secondsAbbrev}\n      </span>\n    )\n  }\n\n  // Factory function to handle possible DNE of window data vars:\n    const getWindowData = dataObj => {\n      if ( window[dataObj] ) {\n        return window[dataObj]\n      }\n      return {}\n    }\n\n\n  // console.log('app was attached', convertedMilliseconds)\n  // console.log('here is date dummy', theDate)\n\n  // console.log('next', Date.now() + 10000)\n  return (\n    convertedMilliseconds ?\n    <Countdown\n    date={convertedMilliseconds}\n    intervalDelay={500}\n    precision={1}\n    renderer={formatDate}\n  />: null\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nlet renderListItems =  document.querySelectorAll('.hidden-timer-div');\n\n// console.log('here is renderlistItems', renderListItems );\n\nrenderListItems.forEach(item => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App item={item} />\n    </React.StrictMode>,\n    item\n  );\n})\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}